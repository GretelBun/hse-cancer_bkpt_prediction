// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SparseVector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SparseVector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SparseVector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SparseVector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SparseVector_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SparseVector_2eproto;
class SparseVector;
struct SparseVectorDefaultTypeInternal;
extern SparseVectorDefaultTypeInternal _SparseVector_default_instance_;
class SparseVector_ChromosomesEntry_DoNotUse;
struct SparseVector_ChromosomesEntry_DoNotUseDefaultTypeInternal;
extern SparseVector_ChromosomesEntry_DoNotUseDefaultTypeInternal _SparseVector_ChromosomesEntry_DoNotUse_default_instance_;
class SparseVector_vec;
struct SparseVector_vecDefaultTypeInternal;
extern SparseVector_vecDefaultTypeInternal _SparseVector_vec_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SparseVector* Arena::CreateMaybeMessage<::SparseVector>(Arena*);
template<> ::SparseVector_ChromosomesEntry_DoNotUse* Arena::CreateMaybeMessage<::SparseVector_ChromosomesEntry_DoNotUse>(Arena*);
template<> ::SparseVector_vec* Arena::CreateMaybeMessage<::SparseVector_vec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SparseVector_vec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SparseVector.vec) */ {
 public:
  inline SparseVector_vec() : SparseVector_vec(nullptr) {}
  ~SparseVector_vec() override;
  explicit PROTOBUF_CONSTEXPR SparseVector_vec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseVector_vec(const SparseVector_vec& from);
  SparseVector_vec(SparseVector_vec&& from) noexcept
    : SparseVector_vec() {
    *this = ::std::move(from);
  }

  inline SparseVector_vec& operator=(const SparseVector_vec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseVector_vec& operator=(SparseVector_vec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseVector_vec& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseVector_vec* internal_default_instance() {
    return reinterpret_cast<const SparseVector_vec*>(
               &_SparseVector_vec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SparseVector_vec& a, SparseVector_vec& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseVector_vec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseVector_vec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseVector_vec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseVector_vec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseVector_vec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseVector_vec& from) {
    SparseVector_vec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseVector_vec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SparseVector.vec";
  }
  protected:
  explicit SparseVector_vec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kIndicesFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // repeated uint32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  uint32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data() const;
  void _internal_add_data(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data();
  public:
  uint32_t data(int index) const;
  void set_data(int index, uint32_t value);
  void add_data(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data();

  // repeated uint32 indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  uint32_t _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_indices() const;
  void _internal_add_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_indices();
  public:
  uint32_t indices(int index) const;
  void set_indices(int index, uint32_t value);
  void add_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_indices();

  // uint32 size = 3;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SparseVector.vec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > indices_;
    mutable std::atomic<int> _indices_cached_byte_size_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SparseVector_2eproto;
};
// -------------------------------------------------------------------

class SparseVector_ChromosomesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseVector_ChromosomesEntry_DoNotUse, 
    std::string, ::SparseVector_vec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseVector_ChromosomesEntry_DoNotUse, 
    std::string, ::SparseVector_vec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SparseVector_ChromosomesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SparseVector_ChromosomesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SparseVector_ChromosomesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SparseVector_ChromosomesEntry_DoNotUse& other);
  static const SparseVector_ChromosomesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparseVector_ChromosomesEntry_DoNotUse*>(&_SparseVector_ChromosomesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "SparseVector.ChromosomesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_SparseVector_2eproto;
};

// -------------------------------------------------------------------

class SparseVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SparseVector) */ {
 public:
  inline SparseVector() : SparseVector(nullptr) {}
  ~SparseVector() override;
  explicit PROTOBUF_CONSTEXPR SparseVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseVector(const SparseVector& from);
  SparseVector(SparseVector&& from) noexcept
    : SparseVector() {
    *this = ::std::move(from);
  }

  inline SparseVector& operator=(const SparseVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseVector& operator=(SparseVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseVector* internal_default_instance() {
    return reinterpret_cast<const SparseVector*>(
               &_SparseVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparseVector& a, SparseVector& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseVector& from) {
    SparseVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SparseVector";
  }
  protected:
  explicit SparseVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SparseVector_vec vec;

  // accessors -------------------------------------------------------

  enum : int {
    kChromosomesFieldNumber = 1,
  };
  // map<string, .SparseVector.vec> chromosomes = 1;
  int chromosomes_size() const;
  private:
  int _internal_chromosomes_size() const;
  public:
  void clear_chromosomes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >&
      _internal_chromosomes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >*
      _internal_mutable_chromosomes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >&
      chromosomes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >*
      mutable_chromosomes();

  // @@protoc_insertion_point(class_scope:SparseVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SparseVector_ChromosomesEntry_DoNotUse,
        std::string, ::SparseVector_vec,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> chromosomes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SparseVector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SparseVector_vec

// repeated uint32 data = 1;
inline int SparseVector_vec::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int SparseVector_vec::data_size() const {
  return _internal_data_size();
}
inline void SparseVector_vec::clear_data() {
  _impl_.data_.Clear();
}
inline uint32_t SparseVector_vec::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline uint32_t SparseVector_vec::data(int index) const {
  // @@protoc_insertion_point(field_get:SparseVector.vec.data)
  return _internal_data(index);
}
inline void SparseVector_vec::set_data(int index, uint32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SparseVector.vec.data)
}
inline void SparseVector_vec::_internal_add_data(uint32_t value) {
  _impl_.data_.Add(value);
}
inline void SparseVector_vec::add_data(uint32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SparseVector.vec.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SparseVector_vec::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SparseVector_vec::data() const {
  // @@protoc_insertion_point(field_list:SparseVector.vec.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SparseVector_vec::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SparseVector_vec::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SparseVector.vec.data)
  return _internal_mutable_data();
}

// repeated uint32 indices = 2;
inline int SparseVector_vec::_internal_indices_size() const {
  return _impl_.indices_.size();
}
inline int SparseVector_vec::indices_size() const {
  return _internal_indices_size();
}
inline void SparseVector_vec::clear_indices() {
  _impl_.indices_.Clear();
}
inline uint32_t SparseVector_vec::_internal_indices(int index) const {
  return _impl_.indices_.Get(index);
}
inline uint32_t SparseVector_vec::indices(int index) const {
  // @@protoc_insertion_point(field_get:SparseVector.vec.indices)
  return _internal_indices(index);
}
inline void SparseVector_vec::set_indices(int index, uint32_t value) {
  _impl_.indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SparseVector.vec.indices)
}
inline void SparseVector_vec::_internal_add_indices(uint32_t value) {
  _impl_.indices_.Add(value);
}
inline void SparseVector_vec::add_indices(uint32_t value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:SparseVector.vec.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SparseVector_vec::_internal_indices() const {
  return _impl_.indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SparseVector_vec::indices() const {
  // @@protoc_insertion_point(field_list:SparseVector.vec.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SparseVector_vec::_internal_mutable_indices() {
  return &_impl_.indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SparseVector_vec::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:SparseVector.vec.indices)
  return _internal_mutable_indices();
}

// uint32 size = 3;
inline void SparseVector_vec::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t SparseVector_vec::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t SparseVector_vec::size() const {
  // @@protoc_insertion_point(field_get:SparseVector.vec.size)
  return _internal_size();
}
inline void SparseVector_vec::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void SparseVector_vec::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:SparseVector.vec.size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SparseVector

// map<string, .SparseVector.vec> chromosomes = 1;
inline int SparseVector::_internal_chromosomes_size() const {
  return _impl_.chromosomes_.size();
}
inline int SparseVector::chromosomes_size() const {
  return _internal_chromosomes_size();
}
inline void SparseVector::clear_chromosomes() {
  _impl_.chromosomes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >&
SparseVector::_internal_chromosomes() const {
  return _impl_.chromosomes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >&
SparseVector::chromosomes() const {
  // @@protoc_insertion_point(field_map:SparseVector.chromosomes)
  return _internal_chromosomes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >*
SparseVector::_internal_mutable_chromosomes() {
  return _impl_.chromosomes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >*
SparseVector::mutable_chromosomes() {
  // @@protoc_insertion_point(field_mutable_map:SparseVector.chromosomes)
  return _internal_mutable_chromosomes();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SparseVector_2eproto
