// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SparseVector.proto

#include "SparseVector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SparseVector_vec::SparseVector_vec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparseVector_vecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseVector_vecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseVector_vecDefaultTypeInternal() {}
  union {
    SparseVector_vec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseVector_vecDefaultTypeInternal _SparseVector_vec_default_instance_;
PROTOBUF_CONSTEXPR SparseVector_ChromosomesEntry_DoNotUse::SparseVector_ChromosomesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SparseVector_ChromosomesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseVector_ChromosomesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseVector_ChromosomesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SparseVector_ChromosomesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseVector_ChromosomesEntry_DoNotUseDefaultTypeInternal _SparseVector_ChromosomesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SparseVector::SparseVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chromosomes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparseVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseVectorDefaultTypeInternal() {}
  union {
    SparseVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseVectorDefaultTypeInternal _SparseVector_default_instance_;
static ::_pb::Metadata file_level_metadata_SparseVector_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SparseVector_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SparseVector_2eproto = nullptr;

const uint32_t TableStruct_SparseVector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SparseVector_vec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SparseVector_vec, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::SparseVector_vec, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::SparseVector_vec, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::SparseVector_ChromosomesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SparseVector_ChromosomesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SparseVector_ChromosomesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SparseVector_ChromosomesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SparseVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SparseVector, _impl_.chromosomes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SparseVector_vec)},
  { 9, 17, -1, sizeof(::SparseVector_ChromosomesEntry_DoNotUse)},
  { 19, -1, -1, sizeof(::SparseVector)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SparseVector_vec_default_instance_._instance,
  &::_SparseVector_ChromosomesEntry_DoNotUse_default_instance_._instance,
  &::_SparseVector_default_instance_._instance,
};

const char descriptor_table_protodef_SparseVector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022SparseVector.proto\"\276\001\n\014SparseVector\0223\n"
  "\013chromosomes\030\001 \003(\0132\036.SparseVector.Chromo"
  "somesEntry\0322\n\003vec\022\014\n\004data\030\001 \003(\r\022\017\n\007indic"
  "es\030\002 \003(\r\022\014\n\004size\030\003 \001(\r\032E\n\020ChromosomesEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.SparseV"
  "ector.vec:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SparseVector_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SparseVector_2eproto = {
    false, false, 221, descriptor_table_protodef_SparseVector_2eproto,
    "SparseVector.proto",
    &descriptor_table_SparseVector_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_SparseVector_2eproto::offsets,
    file_level_metadata_SparseVector_2eproto, file_level_enum_descriptors_SparseVector_2eproto,
    file_level_service_descriptors_SparseVector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SparseVector_2eproto_getter() {
  return &descriptor_table_SparseVector_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SparseVector_2eproto(&descriptor_table_SparseVector_2eproto);

// ===================================================================

class SparseVector_vec::_Internal {
 public:
};

SparseVector_vec::SparseVector_vec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SparseVector.vec)
}
SparseVector_vec::SparseVector_vec(const SparseVector_vec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseVector_vec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:SparseVector.vec)
}

inline void SparseVector_vec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparseVector_vec::~SparseVector_vec() {
  // @@protoc_insertion_point(destructor:SparseVector.vec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseVector_vec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.indices_.~RepeatedField();
}

void SparseVector_vec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseVector_vec::Clear() {
// @@protoc_insertion_point(message_clear_start:SparseVector.vec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.indices_.Clear();
  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseVector_vec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseVector_vec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SparseVector.vec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  // repeated uint32 indices = 2;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_indices(), byte_size, target);
    }
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SparseVector.vec)
  return target;
}

size_t SparseVector_vec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SparseVector.vec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 indices = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseVector_vec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseVector_vec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseVector_vec::GetClassData() const { return &_class_data_; }


void SparseVector_vec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseVector_vec*>(&to_msg);
  auto& from = static_cast<const SparseVector_vec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SparseVector.vec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseVector_vec::CopyFrom(const SparseVector_vec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SparseVector.vec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseVector_vec::IsInitialized() const {
  return true;
}

void SparseVector_vec::InternalSwap(SparseVector_vec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseVector_vec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SparseVector_2eproto_getter, &descriptor_table_SparseVector_2eproto_once,
      file_level_metadata_SparseVector_2eproto[0]);
}

// ===================================================================

SparseVector_ChromosomesEntry_DoNotUse::SparseVector_ChromosomesEntry_DoNotUse() {}
SparseVector_ChromosomesEntry_DoNotUse::SparseVector_ChromosomesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SparseVector_ChromosomesEntry_DoNotUse::MergeFrom(const SparseVector_ChromosomesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SparseVector_ChromosomesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SparseVector_2eproto_getter, &descriptor_table_SparseVector_2eproto_once,
      file_level_metadata_SparseVector_2eproto[1]);
}

// ===================================================================

class SparseVector::_Internal {
 public:
};

SparseVector::SparseVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SparseVector::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:SparseVector)
}
SparseVector::SparseVector(const SparseVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseVector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.chromosomes_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.chromosomes_.MergeFrom(from._impl_.chromosomes_);
  // @@protoc_insertion_point(copy_constructor:SparseVector)
}

inline void SparseVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.chromosomes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparseVector::~SparseVector() {
  // @@protoc_insertion_point(destructor:SparseVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SparseVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chromosomes_.Destruct();
  _impl_.chromosomes_.~MapField();
}

void SparseVector::ArenaDtor(void* object) {
  SparseVector* _this = reinterpret_cast< SparseVector* >(object);
  _this->_impl_.chromosomes_.Destruct();
}
void SparseVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseVector::Clear() {
// @@protoc_insertion_point(message_clear_start:SparseVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chromosomes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .SparseVector.vec> chromosomes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.chromosomes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SparseVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .SparseVector.vec> chromosomes = 1;
  if (!this->_internal_chromosomes().empty()) {
    using MapType = ::_pb::Map<std::string, ::SparseVector_vec>;
    using WireHelper = SparseVector_ChromosomesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_chromosomes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "SparseVector.ChromosomesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SparseVector)
  return target;
}

size_t SparseVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SparseVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .SparseVector.vec> chromosomes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chromosomes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SparseVector_vec >::const_iterator
      it = this->_internal_chromosomes().begin();
      it != this->_internal_chromosomes().end(); ++it) {
    total_size += SparseVector_ChromosomesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseVector::GetClassData() const { return &_class_data_; }


void SparseVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseVector*>(&to_msg);
  auto& from = static_cast<const SparseVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SparseVector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chromosomes_.MergeFrom(from._impl_.chromosomes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseVector::CopyFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseVector::IsInitialized() const {
  return true;
}

void SparseVector::InternalSwap(SparseVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chromosomes_.InternalSwap(&other->_impl_.chromosomes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SparseVector_2eproto_getter, &descriptor_table_SparseVector_2eproto_once,
      file_level_metadata_SparseVector_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SparseVector_vec*
Arena::CreateMaybeMessage< ::SparseVector_vec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SparseVector_vec >(arena);
}
template<> PROTOBUF_NOINLINE ::SparseVector_ChromosomesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::SparseVector_ChromosomesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SparseVector_ChromosomesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SparseVector*
Arena::CreateMaybeMessage< ::SparseVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SparseVector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
